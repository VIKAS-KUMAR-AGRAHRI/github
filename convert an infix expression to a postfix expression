#first method......................
#Function to convert an infix expression to a postfix expression.
    def InfixtoPostfix( exp):
        stack = []
        st = ''
        for i in exp:
            if i in '^*()/+-':
                if i =='-':
                    while len(stack) !=0 and ( stack[-1]=='+' or stack[-1]=='-' or stack[-1]=='/' or stack[-1]=='*' or stack[-1]=='^'):
                        j = stack.pop()
                        st +=j
                    stack.append(i)
                if i =='+':
                    while len(stack) !=0 and ( stack[-1]=='-'or stack[-1]=='+' or stack[-1]=='/' or stack[-1]=='*' or stack[-1]=='^' ):
                        j = stack.pop()
                        st +=j
                    stack.append(i)
                if i =='*':
                    while len(stack) !=0 and (stack[-1] =='/'or stack[-1]=='*' or stack[-1] == '^'):
                        j = stack.pop()
                        st +=j
                    stack.append(i)
                if i =='/':
                    while len(stack) !=0 and (stack[-1] =='*'or stack[-1]=='/' or stack[-1] == '^'):
                        j = stack.pop()
                        st +=j
                    stack.append(i)
                if i =='^':
                    while len(stack) !=0 and stack[-1]=='^':
                        j = stack.pop()
                        st +=j
                    stack.append(i)
                if i =='(':
                    stack.append(i)
                if i ==')':
                    while len(stack)!=0 and stack[-1] != '(':
                        j = stack.pop()
                        st +=j
                    stack.pop()
                  
            else:
                st +=i
        for i in stack:
            j = stack.pop()
            st += j
        return st
#first method end here.............

#second method start from here............
def InfixtoPostfix(self, exp):
        stack=[]
        top=-1
        postfix=''
        d={'^':3,'*':2,'/':2,'+':1,'-':1,'(':0}
        for v in exp:
            #if (v>='a' and v<='z') or (v>='A' and v<='Z'):
            if v.isdigit() or v.isalpha():
                postfix += v
            elif stack==[] or v=='(':
                stack.append(v)
                top+=1 
            elif v==')':
                while stack[top]!='(' and top!=-1:
                    postfix+=stack[top]
                    stack.pop()
                    top-=1
                if top!=-1:
                    stack.pop()
                    top-=1
            else:
                while top!=-1 and d[v]<=d[stack[top]]:
                    postfix+=stack[top]
                    top-=1 
                    stack.pop()
                stack.append(v)
                top+=1 
        for i in range(len(stack)-1,-1,-1):
            postfix+=stack[i]
        return postfix
#second method end here..................................
